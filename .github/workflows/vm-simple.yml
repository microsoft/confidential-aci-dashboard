name: VM Simple

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    paths:
      - .github/workflows/vm-simple.yml
  push:
    branches:
      - main
    paths:
      - .github/workflows/vm-simple.yml
  workflow_dispatch:
    inputs:
      id:
        type: string
        description: ID of the run
      location:
        type: string
        description: Where to deploy to
        required: true
      zone:
        type: string
        description: The zone to deploy to
        required: false
        default: ''
      vmImage:
        type: string
        description: The Atlas image to use for the VM
        required: false
        default: ''
      vmSize:
        type: string
        description: The size of the VM
        default: Standard_DC4as_cc_v5
      cleanup:
        type: boolean
        description: Whether to cleanup the VM after testing
        default: true
      cplatBlobName:
        type: string
        description: The name of the containerplat blob
        default: ''
      winFlavor:
        type: choice
        description: The Windows version of the image
        default: ws2025
        options:
          - ws2022
          - ws2025
  workflow_call:
    inputs:
      id:
        type: string
        description: ID of the run
      location:
        type: string
        description: Where to deploy to
        required: true
      zone:
        type: string
        description: The zone to deploy to
        required: false
        default: ''
      vmImage:
        type: string
        description: The Atlas image to use for the VM
        required: false
        default: ''
      vmSize:
        type: string
        description: The size of the VM
        default: Standard_DC4as_cc_v5
      cleanup:
        type: boolean
        description: Whether to cleanup the VM after testing
        default: true
      cplatBlobName:
        type: string
        description: The name of the containerplat blob
        default: ''
      winFlavor:
        type: string
        description: The Windows version of the image
        default: ws2025

env:
  DEPLOYMENT_NAME: ${{ inputs.id || 'vm-simple' }}-${{ inputs.location }}-${{ github.run_number }}
  SUBSCRIPTION: ${{ vars.SUBSCRIPTION }}
  RESOURCE_GROUP: c-aci-dashboard
  REGISTRY: cacidashboard.azurecr.io
  MANAGED_IDENTITY: cacidashboard
  STORAGE_ACCOUNT: cacitestingstorage
  LOCATION: ${{ inputs.location || 'uaenorth' }}
  CLEANUP: ${{ inputs.cleanup }}
  VM_SIZE: ${{ inputs.vmSize || 'Standard_DC8as_cc_v5' }}
  VM_IMAGE: ${{ inputs.vmImage || ( inputs.winFlavor == 'ws2022' && secrets.VM_IMAGE_WS2022 || secrets.VM_IMAGE_WS2025 ) }}
  CPLAT_BLOB_NAME: ${{ inputs.cplatBlobName || vars.CPLAT_6_1_BLOB_NAME }}
  WIN_FLAVOR: ${{ inputs.winFlavor || 'ws2025' }}
  VM_ZONE: ${{ inputs.zone || '' }}

jobs:
  vm-simple:
    name: ${{ inputs.id || 'vm-simple' }}
    runs-on: ubuntu-latest
    continue-on-error: true # This only works because historical results tracks per job and failing jobs are still red
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Install c_aci_testing package
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./scripts/install-c-aci-testing.sh

      - name: Install Azure CLI
        env:
          AZ_CLI_VERSION: 2.61.0
        run: ./scripts/install-az-cli.sh

      - name: Setup Docker
        run: sudo usermod -aG docker $USER

      - name: Pull Image
        run: c-aci-testing images pull workloads/attestation

      - name: Set Parameters
        run: |
          c-aci-testing aci param_set workloads/attestation --parameter cpu=$CPU
          c-aci-testing aci param_set workloads/attestation --parameter memoryInGb=$MEMORY_IN_GB

      - name: Generate Security Policy
        run: |
          c-aci-testing policies gen workloads/attestation --deployment-name $DEPLOYMENT_NAME --policy-type allow_all
          cat workloads/attestation/policy_attestation.rego

      - name: Deploy VM and Container Group
        run: c-aci-testing vm deploy workloads/attestation --deployment-name $DEPLOYMENT_NAME

      - name: Print info
        run: |
          c-aci-testing vm exec --deployment-name $DEPLOYMENT_NAME '
            Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" > C:\info.txt
            echo >> C:\info.txt
            Set-Alias -Name shimdiag -Value C:\ContainerPlat\shimdiag.exe
            echo "uname": >> C:\info.txt
            shimdiag exec (shimdiag list)[0] sh -c 'uname -a' >> C:\info.txt
            echo "cpuinfo": >> C:\info.txt
            shimdiag exec (shimdiag list)[0] sh -c 'cat /proc/cpuinfo' >> C:\info.txt
            echo "snp-report": >> C:\info.txt
            shimdiag exec (shimdiag list)[0] sh -c 'snp-report' >> C:\info.txt
          '
          c-aci-testing vm cat --deployment-name $DEPLOYMENT_NAME 'C:\info.txt'

      - name: Check dmesg
        if: always()
        run: |
          set +e
          dmesg_file="dmesg.log"

          c-aci-testing vm exec --deployment-name $DEPLOYMENT_NAME 'Get-Item C:\*\dmesg*.log | foreach { echo ""; echo ""; echo $_.FullName; cat -Raw $_ } > C:\all-dmesg.log'
          c-aci-testing vm cat --deployment-name $DEPLOYMENT_NAME 'C:\all-dmesg.log' > $dmesg_file
          if [ $? -ne 0 ]; then
            echo "Failed to get dmesg."
            cat $dmesg_file
            exit 1
          fi

          found_sus_message=""
          grep -F '] hv_storvsc' $dmesg_file && found_sus_message="hv_storvsc"
          grep -i segfault $dmesg_file && found_sus_message="segfault"
          grep -i 'protection fault' $dmesg_file && found_sus_message="protection-fault"
          grep 'BUG:' $dmesg_file && found_sus_message="kernel-bug"
          grep 'WARNING:' $dmesg_file && found_sus_message="kernel-bug"
          grep 'RIP:' $dmesg_file && found_sus_message="kernel-backtrace"

          cat $dmesg_file

          if [ -n "$found_sus_message" ]; then
            echo "Found suspicious message in dmesg: $found_sus_message"
            exit 1
          fi

          if [ ! -s $dmesg_file ]; then
            echo "No dmesg output found"
            exit 1
          fi

      - name: Remove VM
        run: |
          if [ "$CLEANUP" != false ]; then
            c-aci-testing vm remove --deployment-name $DEPLOYMENT_NAME
          fi
