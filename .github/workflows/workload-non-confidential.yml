name: Workload - Non Confidential

permissions:
  id-token: write
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      id:
        type: string
        description: ID of the run
      location:
        type: string
        description: Where to deploy to
        required: true
      cpu:
        type: number
        description: The number of CPU cores in container
        default: 2
      memory_in_gb:
        type: number
        description: The memory in container in Gb
        default: 4
      cleanup:
        type: boolean
        description: Whether to cleanup the container group after testing
        default: true
      policy_type:
        type: string
        description: The type of policy to use
        default: generated
  workflow_call:
    inputs:
      id:
        type: string
        description: ID of the run
      location:
        type: string
        description: Where to deploy to
        required: true
      cpu:
        type: number
        description: The number of CPU cores in container
        default: 2
      memory_in_gb:
        type: number
        description: The memory in container in Gb
        default: 4
      cleanup:
        type: boolean
        description: Whether to cleanup the container group after testing
        default: true
      policy_type:
        type: string
        description: The type of policy to use
        default: generated

env:
  DEPLOYMENT_NAME: ${{ inputs.id || 'non-confidential' }}-${{ inputs.location }}-${{ github.run_number }}
  SUBSCRIPTION: ${{ vars.SUBSCRIPTION }}
  RESOURCE_GROUP: c-aci-dashboard
  REGISTRY: cacidashboard.azurecr.io
  MANAGED_IDENTITY: cacidashboard
  LOCATION: ${{ inputs.location || 'westeurope' }}
  CPU: ${{ inputs.cpu || 2 }}
  MEMORY_IN_GB: ${{ inputs.memory_in_gb || 4 }}
  CLEANUP: ${{ inputs.cleanup }}
  POLICY_TYPE: ${{ inputs.policy_type || 'generated' }}

jobs:
  non-confidential:
    name: ${{ inputs.id || 'non-confidential' }}
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Install c_aci_testing package
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./scripts/install-c-aci-testing.sh

      - name: Install Azure CLI
        env:
          AZ_CLI_VERSION: 2.61.0
        run: ./scripts/install-az-cli.sh

      - name: Setup Docker
        run: sudo usermod -aG docker $USER

      - name: Pull Image
        run: c-aci-testing images pull workloads/non_confidential

      - name: Set Parameters
        run: |
          c-aci-testing aci param_set workloads/non_confidential --parameter cpu=$CPU
          c-aci-testing aci param_set workloads/non_confidential --parameter memoryInGb=$MEMORY_IN_GB

      - name: Deploy Container Group
        run: c-aci-testing aci deploy workloads/non_confidential --deployment-name $DEPLOYMENT_NAME

      - name: Wait for IP address
        run: |
          ip_address=""
          elapsed=0
          while [[ -z "$ip_address" && elapsed -lt 60 ]]; do
            ip_address=$(c-aci-testing aci get ips --deployment-name $DEPLOYMENT_NAME | sed "s/\['\([^']*\)'\]/\1/")
            echo "IP Address: $ip_address"
            sleep 5
            elapsed=$((elapsed + 5))
          done

      - name: Curl Server
        run: |
          ip_address=$(c-aci-testing aci get ips --deployment-name $DEPLOYMENT_NAME | sed "s/\['\([^']*\)'\]/\1/")
          echo "IP Address fetched by Az CLI is: $ip_address"
          echo "Attempting to send a request..."
          curl http://$ip_address:80

      - name: Monitor Container Group
        if: always()
        continue-on-error: true
        run: c-aci-testing aci monitor --deployment-name $DEPLOYMENT_NAME

      - name: Get Container States
        if: always()
        continue-on-error: true
        run: |
          sleep 60 # Ensure all states are up to date
          az container show \
            --resource-group $RESOURCE_GROUP \
            --name $DEPLOYMENT_NAME \
          | jq -c '.containers[]' | while read -r container; do
            container_name=$(echo "$container" | jq -r '.name')
            echo "Events for container $container_name:"
            echo "$container" | jq -r '.instanceView | .events[]'
          done

      - name: Remove Container Group
        run: |
          if [ "$CLEANUP" != false ]; then
            c-aci-testing aci remove --deployment-name $DEPLOYMENT_NAME
          fi