name: VM reboot timing

permissions:
  id-token: write
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      id:
        type: string
        description: ID of the run
      location:
        type: string
        description: Where to deploy to
        required: true
      vmImage:
        type: string
        description: The Atlas image to use for the VM
        required: false
        default: ''
      vmSize:
        type: string
        description: The size of the VM
        default: Standard_DC8as_cc_v5
      cleanup:
        type: boolean
        description: Whether to cleanup the VM after testing
        default: true
      cplatBlobName:
        type: string
        description: The name of the containerplat blob
        default: ''
      winFlavor:
        type: choice
        description: The Windows version of the image
        default: ws2025
        options:
          - ws2022
          - ws2025
  workflow_call:
    inputs:
      id:
        type: string
        description: ID of the run
      location:
        type: string
        description: Where to deploy to
        required: true
      vmSize:
        type: string
        description: The size of the VM
        default: Standard_DC8as_cc_v5
      cleanup:
        type: boolean
        description: Whether to cleanup the VM after testing
        default: true
      cplatBlobName:
        type: string
        description: The name of the containerplat blob
        default: ''
      winFlavor:
        type: string
        description: The Windows version of the image
        default: ws2025

env:
  DEPLOYMENT_NAME: vm-${{ inputs.id || 'heavy-io' }}-${{ inputs.location }}-${{ github.run_number }}
  SUBSCRIPTION: ${{ vars.SUBSCRIPTION }}
  RESOURCE_GROUP: c-aci-dashboard
  REGISTRY: cacidashboard.azurecr.io
  MANAGED_IDENTITY: cacidashboard
  LOCATION: ${{ inputs.location || 'westus' }}
  CPU: ${{ inputs.cpu || 4 }}
  MEMORY_IN_GB: ${{ inputs.memory_in_gb || 4 }}
  CLEANUP: ${{ inputs.cleanup }}
  USE_NORMAL_SIDECAR: true
  VM_SIZE: ${{ inputs.vmSize || 'Standard_DC4ads_cc_v5' }}
  VM_IMAGE: ${{ inputs.vmImage || secrets.VM_IMAGE }}
  CPLAT_BLOB_NAME: ${{ inputs.cplatBlobName || vars.CPLAT_BLOB_NAME }}
  WIN_FLAVOR: ${{ inputs.winFlavor || 'ws2025' }}

jobs:
  heavy-io:
    name: ${{ inputs.id || 'heavy-io' }}
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      # - name: Install c_aci_testing package
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #   run: ./scripts/install-c-aci-testing.sh

      ###### TESTING    REMOVE BEFORE MERGE ########
      - name: Checkout c-aci-testing
        uses: actions/checkout@v2
        with:
          repository: microsoft/confidential-aci-testing
          ref: tingmao/vmtest
          path: c-aci-testing

      - name: Install c-aci-testing
        run: cd c-aci-testing && pip install flit && flit install
      ###### END TESTING    REMOVE BEFORE MERGE ########

      - name: Install Azure CLI
        env:
          AZ_CLI_VERSION: 2.61.0
        run: ./scripts/install-az-cli.sh

      - name: Setup Docker
        run: sudo usermod -aG docker $USER

      - name: Use precise current time as tag
        run: |
          TAG=$(date "+%Y%m%d-%H%M%S.%N")
          echo "TAG=$TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Build image
        run: c-aci-testing images build workloads/heavy_io

      - name: Push image
        run: c-aci-testing images push workloads/heavy_io

      - name: Set parameters
        run: |
          c-aci-testing aci param_set workloads/heavy_io --parameter cpu=4
          c-aci-testing aci param_set workloads/heavy_io --parameter memoryInGb=4
          c-aci-testing aci param_set workloads/heavy_io --parameter "script='workload_cpu_fio'"
          c-aci-testing aci param_set workloads/heavy_io --parameter "useNormalSidecar=true"
          echo heavy_io.bicepparam:
          cat workloads/heavy_io/heavy_io.bicepparam

      # The security policy has to be allow_all for exec-based checks to work
      - name: Fill in allow_all security policy
        run: |
          c-aci-testing policies gen workloads/heavy_io --deployment-name $DEPLOYMENT_NAME --policy-type allow_all
          cat workloads/heavy_io/policy_heavy_io.rego

      - name: Deploy VM with containerplat and run container
        run: c-aci-testing vm deploy workloads/heavy_io --deployment-name $DEPLOYMENT_NAME --prefix lcow

      - name: Check, wait a bit, then check VM
        run: |
          date
          c-aci-testing vm check --deployment-name $DEPLOYMENT_NAME --prefix lcow
          for i in {1..5}; do
            sleep 60
            date
            c-aci-testing vm check --deployment-name $DEPLOYMENT_NAME --prefix lcow
          done

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Check, wait a bit, then check VM
        run: |
          date
          c-aci-testing vm check --deployment-name $DEPLOYMENT_NAME --prefix lcow
          for i in {1..5}; do
            sleep 60
            date
            c-aci-testing vm check --deployment-name $DEPLOYMENT_NAME --prefix lcow
          done

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Check, wait a bit, then check VM
        run: |
          date
          c-aci-testing vm check --deployment-name $DEPLOYMENT_NAME --prefix lcow
          for i in {1..5}; do
            sleep 60
            date
            c-aci-testing vm check --deployment-name $DEPLOYMENT_NAME --prefix lcow
          done

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Check, wait a bit, then check VM
        run: |
          date
          c-aci-testing vm check --deployment-name $DEPLOYMENT_NAME --prefix lcow
          for i in {1..5}; do
            sleep 60
            date
            c-aci-testing vm check --deployment-name $DEPLOYMENT_NAME --prefix lcow
          done

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Check, wait a bit, then check VM
        run: |
          date
          c-aci-testing vm check --deployment-name $DEPLOYMENT_NAME --prefix lcow
          for i in {1..5}; do
            sleep 60
            date
            c-aci-testing vm check --deployment-name $DEPLOYMENT_NAME --prefix lcow
          done

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      # TODO: find a better way to fetch dmesg - Azure truncates the output
      - name: Check dmesg
        if: always()
        run: |
            dmesg_file="dmesg.log"

            c-aci-testing vm exec --deployment-name $DEPLOYMENT_NAME 'cat C:/*/dmesg*.log' > $dmesg_file
            if [ $? -ne 0 ]; then
              echo "Failed to get dmesg:"
              cat $dmesg_file
              exit 1
            fi

            found_sus_message=""
            grep -F '] hv_storvsc' $dmesg_file && found_sus_message="hv_storvsc"
            grep -i segfault $dmesg_file && found_sus_message="segfault"
            grep -i 'protection fault' $dmesg_file && found_sus_message="protection-fault"
            grep 'BUG:' $dmesg_file && found_sus_message="kernel-bug"
            grep 'RIP:' $dmesg_file && found_sus_message="kernel-backtrace"

            cat $dmesg_file

            if [ -n "$found_sus_message" ]; then
              echo "Found suspicious message in dmesg: $found_sus_message"
              exit 1
            fi

            if [ ! -s $dmesg_file ]; then
              echo "No dmesg output found"
              exit 1
            fi

      - name: Remove VM
        run: |
          if [ "$CLEANUP" != false ]; then
            c-aci-testing vm remove --deployment-name $DEPLOYMENT_NAME
          fi
