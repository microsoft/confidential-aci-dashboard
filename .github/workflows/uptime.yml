name: Uptime

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    paths:
      - .github/workflows/uptime.yml
  workflow_call:
    inputs:
      location:
        type: string
        required: true
        description: 'The location of the Azure Container Instances'

env:
  RESOURCE_GROUP: c-aci-dashboard
  UPTIME_HRS: 48
  LOCATION: ${{ inputs.location || 'westeurope' }}

jobs:

  cleanup-deployed:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Delete Old Container Groups
        run: |
          CONTAINERS=$(az container list \
            --resource-group $RESOURCE_GROUP \
            --query "[?starts_with(name, 'uptime-') && location=='${{ env.LOCATION }}']")

          for container in $(echo $CONTAINERS | jq -r '.[].id'); do
            echo "checking $container"
            creationTime=$(date -d $(az container show --ids $container --query "containers[0].instanceView.events" --output json | jq -r 'min_by(.firstTimestamp) | .firstTimestamp') +%s)
            containerAge=$(( ($(date -u +"%s") - $creationTime) / 3600 ))
            echo "creationTime=$creationTime"
            echo "containerAge=$containerAge hours"
            if [ $containerAge -gt ${{ env.UPTIME_HRS }} ]; then
                echo "Deleting container group: ${container}"
                az resource delete --ids $container
            fi
          done

  check-deployed:
    runs-on: ubuntu-latest
    needs: cleanup-deployed
    if: always()
    outputs:
      deployment-needed: ${{ steps.check-container-liveness.outputs.deployment-needed }}
    steps:
      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Check Deployed Containers
        id: check-container-liveness
        run: |
          CONTAINERS=$(az container list \
            --resource-group $RESOURCE_GROUP \
            --query "[?starts_with(name, 'uptime-') && location=='${{ env.LOCATION }}']")

          echo $CONTAINERS

          if [ -z "$CONTAINERS" ]; then
            echo "No containers found"
            echo "deployment-needed=1" >> $GITHUB_OUTPUT
            exit 0
          fi

          BAD_STATES=("Killed" "Stopped" "Failed")

          currentContainerCount=0

          for container in $(echo $CONTAINERS | jq -r '.[].id'); do
            echo "Checking $container"
            containerJson=$(az container show --ids $container)
            containerCreate=$(date -d $(echo $containerJson | jq -r '.containers[0].instanceView.events' | jq -r 'min_by(.firstTimestamp) | .firstTimestamp') +%s)
            containerAge=$(( ($(date -u +"%s") - $containerCreate) / 3600 ))
            echo "  Age: $containerAge hours"
            if [ $containerAge -lt ${{ env.UPTIME_HRS }} ]; then
              currentContainerCount=$((currentContainerCount + 1))
              echo "  Container is less than ${{ env.UPTIME_HRS }} hours old, checking for bad states:"
              containerStates=$(echo $containerJson | jq -r '.containers[0].instanceView.events[].name')
              echo "  All states: $(echo $containerStates | tr '\n' ' ')"
              for containerState in $containerStates; do
                for badState in "${BAD_STATES[@]}"; do
                  if [[ "$containerState" == "$badState" ]]; then
                    echo "    This group entered the failure state "$badState" in the last 48 hours"
                    echo "    Cleaning up failed group and exiting with error"
                    az resource delete --ids $container
                    exit 1
                  fi
                done
              done
              echo "  No bad states found"
            fi
          done

          echo "There are $currentContainerCount currently running containers"
          if [ $currentContainerCount -lt 3 ]; then
            echo "Deployment needed"
          else
            echo "No deployment needed"
          fi
          echo "deployment-needed=$(($currentContainerCount < 3 ? 1 : 0))" >> $GITHUB_OUTPUT

  deploy-new:
    needs: check-deployed
    if: ${{ always() && needs.check-deployed.outputs.deployment-needed == '1' }}
    secrets: inherit
    uses: ./.github/workflows/workload-long-lived.yml
    with:
      id: uptime
      location: ${{ inputs.location || 'westeurope' }}
      cleanup: false
