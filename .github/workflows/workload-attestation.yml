name: Workload - Attestation

permissions:
  id-token: write
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      id:
        type: string
        description: ID of the run
      location:
        type: string
        description: Where to deploy to
        required: true
      cpu:
        type: number
        description: The number of CPU cores in container
        default: 1
      memory_in_gb:
        type: number
        description: The memory in container in Gb
        default: 4
      cleanup:
        type: boolean
        description: Whether to cleanup the container group after testing
        default: true
      allow_all:
        type: boolean
        description: Whether to use the allow all policy
        default: false
  workflow_call:
    inputs:
      id:
        type: string
        description: ID of the run
      location:
        type: string
        description: Where to deploy to
        required: true
      cpu:
        type: number
        description: The number of CPU cores in container
        default: 1
      memory_in_gb:
        type: number
        description: The memory in container in Gb
        default: 4
      cleanup:
        type: boolean
        description: Whether to cleanup the container group after testing
        default: true
      allow_all:
        type: boolean
        description: Whether to use the allow all policy
        default: false

env:
  DEPLOYMENT_NAME: ${{ inputs.id || 'attestation' }}-${{ inputs.location }}-${{ github.run_id }}-${{ github.run_number }}
  SUBSCRIPTION: ${{ vars.SUBSCRIPTION }}
  RESOURCE_GROUP: c-aci-dashboard
  REGISTRY: cacidashboard.azurecr.io
  MANAGED_IDENTITY: cacidashboard
  LOCATION: ${{ inputs.location || 'westeurope' }}
  CPU: ${{ inputs.cpu || 1 }}
  MEMORY_IN_GB: ${{ inputs.memory_in_gb || 4 }}
  CLEANUP: ${{ inputs.cleanup }}
  ALLOW_ALL: ${{ inputs.allow_all || false }}
  TAG: 2.7

jobs:
  attestation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Install c_aci_testing package
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./scripts/install-c-aci-testing.sh

      - name: Setup Docker
        run: sudo usermod -aG docker $USER

      - name: Pull Image
        run: python -m c_aci_testing.images_pull workloads/attestation

      - name: Set Parameters
        run: |
          python -m c_aci_testing.aci_param_set workloads/attestation --parameter cpu=$CPU
          python -m c_aci_testing.aci_param_set workloads/attestation --parameter memoryInGb=$MEMORY_IN_GB

      - name: Generate Security Policy
        run: |
          if [ "$ALLOW_ALL" == true ]; then
            python -m c_aci_testing.policies_gen workloads/attestation --deployment-name $DEPLOYMENT_NAME --allow-all
          else
            python -m c_aci_testing.policies_gen workloads/attestation --deployment-name $DEPLOYMENT_NAME
          fi
          cat workloads/attestation/policy_attestation.rego

      - name: Deploy Container Group
        run: python -m c_aci_testing.aci_deploy workloads/attestation --name $DEPLOYMENT_NAME

      - name: Monitor Container Group
        run: python -m c_aci_testing.aci_monitor --name $DEPLOYMENT_NAME --no-follow

      - name: Get MAA Token
        run: |
          ip_address=$(python -m c_aci_testing.aci_get_ips --name $DEPLOYMENT_NAME)

          result=$(curl -X POST "http://$ip_address:8000/attest/maa" \
            -H "Content-Type: application/json" \
            -d '{"maa_endpoint": "cacidashboard.weu.attest.azure.net", "runtime_data": "'$(echo '{"keys": [{"key_ops": ["encrypt"], "kid": "example-key", "kty": "oct-HSM", "k": "example"}]}' | base64 -w 0)'"}')

          token=$(echo $result | jq -r '.token')
          if [ -z "$token" ]; then
            echo "Token field is empty or missing in the response"
            exit 1
          else
            echo "Token successfully acquired from MAA: $token"
          fi

      - name: Remove Container Group
        run: |
          if [ "$CLEANUP" = true ]; then
            python -m c_aci_testing.aci_remove --name $DEPLOYMENT_NAME
          fi