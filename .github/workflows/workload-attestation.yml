name: Workload - Attestation

permissions:
  id-token: write
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      id:
        type: string
        description: ID of the run
      location:
        type: string
        description: Where to deploy to
        required: true
      cpu:
        type: number
        description: The number of CPU cores in container
        default: 1
      memory_in_gb:
        type: number
        description: The memory in container in Gb
        default: 4
      cleanup:
        type: boolean
        description: Whether to cleanup the container group after testing
        default: true
      allow_all:
        type: boolean
        description: Whether to use the allow all policy
        default: false
  workflow_call:
    inputs:
      id:
        type: string
        description: ID of the run
      location:
        type: string
        description: Where to deploy to
        required: true
      cpu:
        type: number
        description: The number of CPU cores in container
        default: 1
      memory_in_gb:
        type: number
        description: The memory in container in Gb
        default: 4
      cleanup:
        type: boolean
        description: Whether to cleanup the container group after testing
        default: true
      allow_all:
        type: boolean
        description: Whether to use the allow all policy
        default: false

env:
  DEPLOYMENT_NAME: ${{ inputs.id || 'attestation' }}-${{ inputs.location }}-${{ github.run_id }}-${{ github.run_number }}
  SUBSCRIPTION: ${{ vars.SUBSCRIPTION }}
  RESOURCE_GROUP: c-aci-dashboard
  REGISTRY: cacidashboard.azurecr.io
  MANAGED_IDENTITY: cacidashboard
  LOCATION: ${{ inputs.location || 'westeurope' }}
  CPU: ${{ inputs.cpu || 1 }}
  MEMORY_IN_GB: ${{ inputs.memory_in_gb || 4 }}
  CLEANUP: ${{ inputs.cleanup }}
  ALLOW_ALL: ${{ inputs.allow_all || false }}
  TAG: 2.7

jobs:
  attestation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Install c_aci_testing package
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./scripts/install-c-aci-testing.sh

      - name: Install Azure CLI
        env:
          AZ_CLI_VERSION: 2.61.0
        run: ./scripts/install-az-cli.sh

      - name: Setup Docker
        run: sudo usermod -aG docker $USER

      - name: Pull Image
        run: c-aci-testing images pull workloads/attestation

      - name: Set Parameters
        run: |
          c-aci-testing aci param_set workloads/attestation --parameter cpu=$CPU
          c-aci-testing aci param_set workloads/attestation --parameter memoryInGb=$MEMORY_IN_GB

      - name: Generate Security Policy
        run: |
          if [ "$ALLOW_ALL" == true ]; then
            c-aci-testing policies gen workloads/attestation --deployment-name $DEPLOYMENT_NAME --policy-type allow_all
          else
            c-aci-testing policies gen workloads/attestation --deployment-name $DEPLOYMENT_NAME
          fi
          cat workloads/attestation/policy_attestation.rego

      - name: Deploy Container Group
        run: c-aci-testing aci deploy workloads/attestation --deployment-name $DEPLOYMENT_NAME

      - name: Wait for IP address
        run: |
          ip_address=""
          elapsed=0
          while [[ -z "$ip_address" && elapsed -lt 60 ]]; do
            ip_address=$(c-aci-testing aci get ips --deployment-name $DEPLOYMENT_NAME | sed "s/\['\([^']*\)'\]/\1/")
            echo "IP Address: $ip_address"
            sleep 5
            elapsed=$((elapsed + 5))
          done

      - name: Get MAA Token
        run: |
          template_ip_address=$(c-aci-testing aci get ips --deployment-name $DEPLOYMENT_NAME | sed "s/\['\([^']*\)'\]/\1/")
          echo "IP Address from template output: $template_ip_address"
          az_cli_ip_address=$(\
            az container show \
            --resource-group $RESOURCE_GROUP \
            --name $DEPLOYMENT_NAME \
            --query ipAddress.ip --output tsv \
          )
          echo "IP Address from az cli: $az_cli_ip_address"

          # Select the IP address which is not empty
          ip_address="${template_ip_address:-${az_cli_ip_address}}"

          result=$(curl -X POST "http://$ip_address:8000/attest/maa" \
            -H "Content-Type: application/json" \
            -d '{"maa_endpoint": "cacidashboard.weu.attest.azure.net", "runtime_data": "'$(echo '{"keys": [{"key_ops": ["encrypt"], "kid": "example-key", "kty": "oct-HSM", "k": "example"}]}' | base64 -w 0)'"}')

          token=$(echo $result | jq -r '.token')
          if [ -z "$token" ] || [ "$token" == null ]; then
            echo "Token field is empty, null or missing in the response"
            exit 1
          else
            echo "Token successfully acquired from MAA: $token"
          fi

          echo "Attempting to parse token to extract UVM compliance"

          echo "Splitting token into header/payload/signature by . delimiter..."
          IFS='.' read -r header payload signature <<< "$token"
          echo "Successfully split token:"
          echo "header=$header"
          echo "payload=$payload"
          echo "signature=$signature"

          echo "Base64 decoding payload..."
          payload=$(echo "$payload" | tr '_-' '/+' | awk '{
              padding = (4 - length($0) % 4) % 4;
              for(i = 0; i < padding; i++) $0 = $0 "=";
              print
          }' | base64 -d 2>/dev/null)
          echo "Base64 decoding payload done:"
          echo "payload=$payload"
          azure_compliance_status=$(echo "$payload" | jq -r '."x-ms-compliance-status"')
          if [ "$azure_compliance_status" != "azure-compliant-uvm" ]; then
            echo "UVM isn't Azure Compliant"
            exit 1
          else
            echo "UVM is Azure Compliant"
          fi

      - name: Monitor Container Group
        if: always()
        continue-on-error: true
        run: c-aci-testing aci monitor --deployment-name $DEPLOYMENT_NAME

      - name: Get Container States
        if: always()
        continue-on-error: true
        run: |
          sleep 60 # Ensure all states are up to date
          az container show \
            --resource-group $RESOURCE_GROUP \
            --name $DEPLOYMENT_NAME \
          | jq -c '.containers[]' | while read -r container; do
            container_name=$(echo "$container" | jq -r '.name')
            echo "Events for container $container_name:"
            echo "$container" | jq -r '.instanceView | .events[]'
          done

      - name: Remove Container Group
        run: |
          if [ "$CLEANUP" != false ]; then
            c-aci-testing aci remove --deployment-name $DEPLOYMENT_NAME
          fi